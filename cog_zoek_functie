"""
Deze functie maakt en zoekt COGs door de twogslijst te doorzoeken.
IN de twogs lijst wordt gezocht naar een eiwit uit een ander twog dat dezelfde connecties zou kunnen hebben.
Als dit eiwit 2 of meer gelijke connecties heeft, wordt het erkend als een cog en aan de lijst toegevoegd.
De gebruikte parameters zijn:
    ncf_twogs   dit is de twogslijst die onderzocht wordt
"""
def NewCogFind(ncf_cogs, ncf_twogs, ncf_prots):
    ncf_twogs_gesplit = []
    teller = 0
    ncf_list = []
    for eerste in ncf_twogs:
        eerste = eerste.split()
        ncf_twogs_gesplit.append(eerste)

    for eerste in ncf_twogs_gesplit:
        connectie = [x[0] for x in ncf_twogs_gesplit if x[0] in eerste or x[1] in eerste]
        connectie += [x[1] for x in ncf_twogs_gesplit if x[0] in eerste or x[1] in eerste]

        data = Counter(connectie)
        cog = list(set([x for x in data if data[x] >= 2]))

        if eerste in ncf_twogs and eerste in ncf_twogs_gesplit:
            ncf_twogs_gesplit.remove(eerste)
            ncf_twogs.remove(eerste)
        if len(cog) >= 3:
            teller += 1
            zinnetje ="%s\t%s\n" % (("0000000000%s" % (teller))[-8:], ', '.join(cog))
            # zinnetje = "0000000000" + str(teller) + ' ' + ' '.join(cog)
            print(zinnetje)
            ncf_list.append(zinnetje)
    VoegToeAanCog(ncf_list)